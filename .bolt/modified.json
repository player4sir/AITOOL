[["/home/project/src/App.tsx","import React, { useState } from 'react';\nimport { ImageIcon, MessageSquare, Loader2 } from 'lucide-react';\nimport ImageGenerator from './components/ImageGenerator';\nimport TextGenerator from './components/TextGenerator';\nimport ImageGallery from './components/ImageGallery';\nimport { GeneratedImage, GeneratedText } from './types';\n\nfunction App() {\n  const [generatedImages, setGeneratedImages] = useState<GeneratedImage[]>([]);\n  const [generatedTexts, setGeneratedTexts] = useState<GeneratedText[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState<'image' | 'text'>('image');\n\n  const handleImageGenerated = (newImage: GeneratedImage) => {\n    setGeneratedImages((prevImages) => [newImage, ...prevImages]);\n  };\n\n  const handleTextGenerated = (newText: GeneratedText) => {\n    setGeneratedTexts((prevTexts) => [newText, ...prevTexts]);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 py-8 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-5xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden\">\n        <header className=\"bg-gradient-to-r from-purple-500 to-indigo-600 text-white p-6\">\n          <h1 className=\"text-4xl font-bold flex items-center justify-center\">\n            <ImageIcon className=\"mr-2\" size={32} />\n            Pollinations AI Playground\n          </h1>\n          <p className=\"mt-2 text-lg text-center\">\n            Generate amazing images and text with AI\n          </p>\n        </header>\n\n        <div className=\"p-6\">\n          <div className=\"flex justify-center space-x-4 mb-6\">\n            <button\n              onClick={() => setActiveTab('image')}\n              className={`px-6 py-3 rounded-full font-semibold transition-all ${\n                activeTab === 'image'\n                  ? 'bg-purple-500 text-white shadow-md'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              <ImageIcon className=\"inline-block mr-2\" size={20} />\n              Image Generation\n            </button>\n            <button\n              onClick={() => setActiveTab('text')}\n              className={`px-6 py-3 rounded-full font-semibold transition-all ${\n                activeTab === 'text'\n                  ? 'bg-indigo-500 text-white shadow-md'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              <MessageSquare className=\"inline-block mr-2\" size={20} />\n              Text Generation\n            </button>\n          </div>\n\n          {activeTab === 'image' ? (\n            <ImageGenerator\n              onImageGenerated={handleImageGenerated}\n              setIsLoading={setIsLoading}\n            />\n          ) : (\n            <TextGenerator\n              onTextGenerated={handleTextGenerated}\n              setIsLoading={setIsLoading}\n            />\n          )}\n\n          {isLoading && (\n            <div className=\"flex justify-center items-center mt-8\">\n              <Loader2 className=\"animate-spin mr-2\" size={24} />\n              <span>Generating {activeTab}...</span>\n            </div>\n          )}\n\n          {activeTab === 'image' && <ImageGallery images={generatedImages} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],["/home/project/src/components/TextGenerator.tsx","import React, { useState, useEffect } from 'react';\nimport { Send, Copy, Check } from 'lucide-react';\nimport { usePollinationsChat } from '@pollinations/react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport remarkMath from 'remark-math';\nimport rehypeKatex from 'rehype-katex';\nimport 'katex/dist/katex.min.css';\nimport { GeneratedText } from '../types';\n\ninterface TextGeneratorProps {\n  onTextGenerated: (text: GeneratedText) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\n\ninterface TextModel {\n  name: string;\n  type: string;\n  censored: boolean;\n  description: string;\n  baseModel: boolean;\n}\n\nconst TextGenerator: React.FC<TextGeneratorProps> = ({ onTextGenerated, setIsLoading }) => {\n  const [prompt, setPrompt] = useState('');\n  const [model, setModel] = useState('openai');\n  const [models, setModels] = useState<TextModel[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [copiedIndex, setCopiedIndex] = useState<number | null>(null);\n\n  const { sendUserMessage, messages } = usePollinationsChat([\n    { role: \"system\", content: \"You are a helpful AI assistant.\" }\n  ], { \n    seed: -1,\n    model: model as any\n  });\n\n  useEffect(() => {\n    fetch('https://text.pollinations.ai/models')\n      .then(response => response.json())\n      .then(data => setModels(data))\n      .catch(error => {\n        console.error('Error fetching text models:', error);\n        setError('Failed to load text models. Please try refreshing the page.');\n      });\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!prompt.trim()) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await sendUserMessage(prompt);\n      onTextGenerated({\n        prompt,\n        content: messages[messages.length - 1].content\n      });\n    } catch (error) {\n      console.error('Error generating text:', error);\n      setError(`Failed to generate text: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setIsLoading(false);\n      setPrompt('');\n    }\n  };\n\n  const handleCopy = (content: string, index: number) => {\n    navigator.clipboard.writeText(content);\n    setCopiedIndex(index);\n    setTimeout(() => setCopiedIndex(null), 2000);\n  };\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"mb-4 h-[500px] overflow-y-auto p-4 bg-gray-50 rounded-lg shadow-inner\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`mb-4 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>\n            <div className={`inline-block max-w-[80%] p-4 rounded-lg shadow-md ${\n              msg.role === 'user' ? 'bg-purple-100 text-purple-900' : 'bg-white text-gray-900'\n            }`}>\n              <div className=\"flex justify-between items-start mb-2\">\n                <span className=\"font-semibold\">{msg.role === 'user' ? 'You' : 'AI'}</span>\n                {msg.role !== 'user' && (\n                  <button\n                    onClick={() => handleCopy(msg.content, index)}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  >\n                    {copiedIndex === index ? <Check size={16} /> : <Copy size={16} />}\n                  </button>\n                )}\n              </div>\n              <ReactMarkdown\n                remarkPlugins={[remarkMath]}\n                rehypePlugins={[rehypeKatex]}\n                components={{\n                  code({node, inline, className, children, ...props}) {\n                    const match = /language-(\\w+)/.exec(className || '')\n                    return !inline && match ? (\n                      <SyntaxHighlighter\n                        style={vscDarkPlus}\n                        language={match[1]}\n                        PreTag=\"div\"\n                        {...props}\n                      >{String(children).replace(/\\n$/, '')}</SyntaxHighlighter>\n                    ) : (\n                      <code className={className} {...props}>\n                        {children}\n                      </code>\n                    )\n                  }\n                }}\n              >\n                {msg.content}\n              </ReactMarkdown>\n            </div>\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit} className=\"mb-4\">\n        <div className=\"mb-4\">\n          <textarea\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Enter your text prompt...\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none\"\n            rows={4}\n          />\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700\">Model</label>\n          <select\n            value={model}\n            onChange={(e) => setModel(e.target.value)}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n          >\n            {models.map((modelOption) => (\n              <option key={modelOption.name} value={modelOption.name}>\n                {modelOption.name} - {modelOption.description}\n              </option>\n            ))}\n          </select>\n        </div>\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n            {error}\n          </div>\n        )}\n        <button\n          type=\"submit\"\n          className=\"w-full flex justify-center items-center bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transition-all\"\n          disabled={!prompt.trim()}\n        >\n          <Send size={16} className=\"mr-2\" />\n          Send Message\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default TextGenerator;"],["/home/project/src/components/ImageGenerator.tsx","import React, { useState, useEffect, useCallback } from 'react';\nimport { Send, AlertCircle } from 'lucide-react';\nimport { GeneratedImage } from '../types';\n\ninterface ImageGeneratorProps {\n  onImageGenerated: (image: GeneratedImage) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\n\nconst ImageGenerator: React.FC<ImageGeneratorProps> = ({ onImageGenerated, setIsLoading }) => {\n  const [prompt, setPrompt] = useState('');\n  const [width, setWidth] = useState(512);\n  const [height, setHeight] = useState(512);\n  const [model, setModel] = useState('flux');\n  const [models, setModels] = useState<string[]>([]);\n  const [seed, setSeed] = useState(-1);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetch('https://image.pollinations.ai/models')\n      .then(response => response.json())\n      .then(data => setModels(data))\n      .catch(error => {\n        console.error('Error fetching image models:', error);\n        setError('Failed to load image models. Please try again later.');\n      });\n  }, []);\n\n  const generateImage = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=${width}&height=${height}&model=${model}&seed=${seed}&nologo=true`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n      const imageUrl = URL.createObjectURL(blob);\n      onImageGenerated({\n        id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        url: imageUrl,\n        prompt,\n      });\n    } catch (error) {\n      console.error('Error generating image:', error);\n      setError('Failed to generate image. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [prompt, width, height, model, seed, onImageGenerated, setIsLoading]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!prompt.trim()) return;\n    setSeed(Math.floor(Math.random() * 1000000));\n    generateImage();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-8\">\n      <div className=\"mb-4\">\n        <input\n          type=\"text\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          placeholder=\"Enter your image description...\"\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700\">Width</label>\n          <input\n            type=\"number\"\n            value={width}\n            onChange={(e) => setWidth(Number(e.target.value))}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700\">Height</label>\n          <input\n            type=\"number\"\n            value={height}\n            onChange={(e) => setHeight(Number(e.target.value))}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700\">Model</label>\n          <select\n            value={model}\n            onChange={(e) => setModel(e.target.value)}\n            className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            {models.map((modelName) => (\n              <option key={modelName} value={modelName}>{modelName}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded flex items-center\">\n          <AlertCircle className=\"mr-2\" size={20} />\n          {error}\n        </div>\n      )}\n      <button\n        type=\"submit\"\n        className=\"w-full flex justify-center items-center bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n        disabled={!prompt.trim()}\n      >\n        <Send size={16} className=\"mr-2\" />\n        Generate Image\n      </button>\n    </form>\n  );\n};\n\nexport default ImageGenerator;"]]